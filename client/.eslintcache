[{"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\index.tsx":"1","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\App.tsx":"3","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\components\\FireLogo.tsx":"4","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\components\\BottomNavBar.tsx":"5","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\HistoryPage.tsx":"6","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\components\\LibraryChip.tsx":"7","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\HomePage.tsx":"8","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\LoginPage.tsx":"9","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\UserSelectionPage.tsx":"10","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\store\\slices\\userSlice.ts":"11","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\store\\store.ts":"12","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\services\\utils.ts":"13","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\store\\slices\\plexSlice.ts":"14","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\services\\auth.service.ts":"15"},{"size":604,"mtime":1608320021434,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":2277,"mtime":1608313774853,"results":"19","hashOfConfig":"17"},{"size":757,"mtime":1608261953908,"results":"20","hashOfConfig":"17"},{"size":1021,"mtime":1608261901629,"results":"21","hashOfConfig":"17"},{"size":138,"mtime":1608312085149,"results":"22","hashOfConfig":"17"},{"size":713,"mtime":1608407534791,"results":"23","hashOfConfig":"17"},{"size":2977,"mtime":1608407482995,"results":"24","hashOfConfig":"17"},{"size":2695,"mtime":1608400965155,"results":"25","hashOfConfig":"17"},{"size":3458,"mtime":1608406571863,"results":"26","hashOfConfig":"17"},{"size":2433,"mtime":1608407811350,"results":"27","hashOfConfig":"17"},{"size":978,"mtime":1608407818998,"results":"28","hashOfConfig":"17"},{"size":759,"mtime":1608407659996,"results":"29","hashOfConfig":"17"},{"size":2192,"mtime":1608406704457,"results":"30","hashOfConfig":"17"},{"size":3914,"mtime":1608407709372,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1uxogpg",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\index.tsx",[],["66","67"],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\App.tsx",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\components\\FireLogo.tsx",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\components\\BottomNavBar.tsx",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\HistoryPage.tsx",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\components\\LibraryChip.tsx",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\HomePage.tsx",["68"],"import {\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LibraryChip } from \"../components/LibraryChip\";\r\nimport { getServers, selectServer } from \"../store/slices/plexSlice\";\r\nimport { AppDispatch, RootState } from \"../store/store\";\r\n\r\nconst useStyles = makeStyles({\r\n  heading: {\r\n    padding: \"1em\",\r\n    paddingBottom: \"0em\",\r\n  },\r\n  container: {\r\n    padding: \"1em\",\r\n  },\r\n  buttonContainer: {\r\n    position: \"absolute\",\r\n    bottom: \"8em\",\r\n  },\r\n  plexButton: {\r\n    padding: \"1em 6em\",\r\n  },\r\n});\r\n\r\nconst HomePage: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const selectedServer = useSelector(\r\n    (state: RootState) => state.plex?.selectedServer\r\n  );\r\n  const serverOptions = useSelector(\r\n    (state: RootState) => state.plex?.serverOptions\r\n  );\r\n  const libraries = useSelector((state: RootState) => state.plex.libraries);\r\n\r\n  useEffect(() => {\r\n    dispatch(getServers());\r\n  }, [dispatch]);\r\n\r\n  const handleServerSelect = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    dispatch(selectServer(event.target.value as string));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        direction=\"row\"\r\n        className={classes.container}\r\n      >\r\n        <FormControl variant=\"filled\" style={{ width: \"100%\" }}>\r\n          <InputLabel id=\"server-select\">Server</InputLabel>\r\n          <Select\r\n            labelId=\"server-select\"\r\n            id=\"server-select\"\r\n            // value={selectedServer?.id}\r\n            onChange={handleServerSelect}\r\n          >\r\n            {serverOptions &&\r\n              serverOptions?.map((server) => {\r\n                return (\r\n                  <MenuItem key={server.id} value={server.id}>\r\n                    {server.name}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {selectedServer && (\r\n        <>\r\n          <Typography className={classes.heading} variant=\"h6\">\r\n            Libraries\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            direction=\"row\"\r\n            className={classes.container}\r\n          >\r\n            {libraries.map((lib) => {\r\n              return <LibraryChip key={lib.id} lib={lib} />;\r\n            })}\r\n          </Grid>\r\n        </>\r\n      )}\r\n\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        className={classes.buttonContainer}\r\n      >\r\n        <Button\r\n          className={classes.plexButton}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Start Swiping\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\LoginPage.tsx",["69"],"import { Button, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n  authLinkSelector,\r\n  checkTokenValidity,\r\n  fetchPins,\r\n  tokenToPin,\r\n} from \"../store/slices/userSlice\";\r\nimport { AppDispatch, RootState } from \"../store/store\";\r\n\r\n// A custom hook that builds on useLocation to parse\r\n// the query string for you.\r\nconst useQuery = () => new URLSearchParams(useLocation().search);\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    fontSize: \"2em\",\r\n  },\r\n  plexButton: {\r\n    marginTop: \"2em\",\r\n    padding: \"1em\",\r\n  },\r\n});\r\n\r\nconst LoginPage: React.FC = () => {\r\n  const query = useQuery();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const user = useSelector((state: RootState) => state.user);\r\n  const authLink = useSelector(authLinkSelector);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  //1) Choose a unique app name, like “My Cool Plex App”\r\n  //2) Check storage for your app’s Client Identifier; generate and store one if none is present.\r\n  //3) Check storage for the user’s Access Token; if present, verify its validity and carry on.\r\n  //4) If an Access Token is missing or invalid, generate a PIN, and store its id.\r\n  //5) Construct an Auth App url and send the user’s browser there to authenticate.\r\n  //6) After authentication, check the PIN’s id to obtain and store the user’s Access Token.\r\n  useEffect(() => {\r\n    // User logged in. Get their access token.\r\n    if (query.has(\"postback\")) {\r\n      dispatch(tokenToPin());\r\n      history.push(\"/home\");\r\n      return;\r\n    }\r\n\r\n    if (user.accessToken) {\r\n      dispatch(checkTokenValidity()).then(async (result) => {\r\n        if (checkTokenValidity.fulfilled.match(result)) {\r\n          const isValid = result.payload;\r\n          if (isValid) {\r\n            history.push(\"/home\");\r\n            return;\r\n          }\r\n          dispatch(fetchPins());\r\n        }\r\n      });\r\n    } else {\r\n      dispatch(fetchPins());\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      style={{ height: \"100%\" }}\r\n    >\r\n      <Typography variant=\"h1\" className={classes.title}>\r\n        Burning for Plex\r\n      </Typography>\r\n      <Button\r\n        href={authLink ?? \"\"}\r\n        className={classes.plexButton}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        disabled={authLink === null}\r\n      >\r\n        Log In with Plex Account\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\pages\\UserSelectionPage.tsx",["70"],"import {\r\n  Avatar,\r\n  ButtonBase,\r\n  CircularProgress,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Snackbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { getUsers } from \"../store/slices/plexSlice\";\r\nimport { AppDispatch, RootState } from \"../store/store\";\r\n\r\nconst useStyles = makeStyles({\r\n  avatarCard: {\r\n    padding: 12,\r\n  },\r\n  avatarGrid: {\r\n    padding: 8,\r\n    maxWidth: \"100%\",\r\n    margin: 0,\r\n  },\r\n  avatarCardText: {\r\n    marginTop: 6,\r\n    fontSize: \"1.6em\",\r\n  },\r\n  buttonWrapper: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    borderRadius: 4,\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: \"1em\",\r\n    paddingBottom: \"0.5em\",\r\n    fontSize: \"2em\",\r\n  },\r\n});\r\n\r\nconst UserSelectionPage: React.FC = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const users = useSelector((state: RootState) => state.plex.users);\r\n  const loading = () => users?.length === 0;\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n  }, []);\r\n\r\n  const handleSelect = () => {\r\n    setOpen(true);\r\n    history.push(\"/dashboard\");\r\n  };\r\n\r\n  if (loading()) {\r\n    return (\r\n      <Grid\r\n        style={{ height: \"100%\" }}\r\n        container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <CircularProgress variant=\"indeterminate\" />\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h3\" className={classes.title}>\r\n        Who are you?\r\n      </Typography>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        spacing={2}\r\n        className={classes.avatarGrid}\r\n      >\r\n        {users.map((user) => {\r\n          return (\r\n            <Grid\r\n              xs={6}\r\n              md={4}\r\n              lg={3}\r\n              item\r\n              onClick={() => handleSelect()}\r\n              key={user.id}\r\n            >\r\n              <ButtonBase className={classes.buttonWrapper}>\r\n                <Paper\r\n                  variant=\"outlined\"\r\n                  elevation={2}\r\n                  className={`${classes.avatarCard} ${classes.buttonWrapper}`}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Avatar alt={user.name} src={user.thumbnail} />\r\n                    <Typography variant=\"h4\" className={classes.avatarCardText}>\r\n                      {user.name}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Paper>\r\n              </ButtonBase>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={4000}\r\n        message=\"Hello world\"\r\n        onClose={() => setOpen(false)}\r\n        action={\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-label=\"close\"\r\n            color=\"inherit\"\r\n            onClick={() => setOpen(false)}\r\n          >\r\n            <CloseIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserSelectionPage;\r\n","C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\store\\slices\\userSlice.ts",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\store\\store.ts",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\services\\utils.ts",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\store\\slices\\plexSlice.ts",[],"C:\\Users\\evanb\\Desktop\\evan-buss\\burning\\client\\src\\services\\auth.service.ts",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":11,"column":28,"nodeType":"77","messageId":"78","endLine":11,"endColumn":36},{"ruleId":"79","severity":1,"message":"80","line":64,"column":6,"nodeType":"81","endLine":64,"endColumn":8,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":56,"column":6,"nodeType":"81","endLine":56,"endColumn":8,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'query', and 'user.accessToken'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [dispatch, history, query, user.accessToken]",{"range":"93","text":"94"},"Update the dependencies array to be: [dispatch]",{"range":"95","text":"96"},[2119,2121],"[dispatch, history, query, user.accessToken]",[1292,1294],"[dispatch]"]